<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
	xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xml="http://www.w3.org/XML/1998/namespace"
	xmlns:common="http://cassini.com/schema/common" xmlns:field="http://cassini.com/schema/field"
	xmlns:tns="http://cassini.com/schema" targetNamespace="http://cassini.com/schema"
	elementFormDefault="qualified" version="1.0">

	<xs:import schemaLocation="XInclude.xsd"
		namespace="http://www.w3.org/2001/XInclude" />
	<xs:import schemaLocation="FieldDefinition.xsd" namespace="http://cassini.com/schema/common" />
	<xs:import schemaLocation="FieldGroup.xsd" namespace="http://cassini.com/schema/field" />

	<xs:element name="pipeline" type="tns:Pipeline">
		<xs:unique name="intermediateFieldUnique">
			<xs:selector xpath="tns:intermediateField"></xs:selector>
			<xs:field xpath="tns:name"></xs:field>
		</xs:unique>
	</xs:element>

	<xs:complexType name="Pipeline">
		<xs:sequence>
			<xs:element name="name" type="xs:string" minOccurs="1"
				maxOccurs="1">
				<xs:annotation>
					<xs:documentation>
						The name of the configuration for the
						transformation
					</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="version" type="xs:string" minOccurs="1"
				maxOccurs="1">
				<xs:annotation>
					<xs:documentation>
						The version of the transformation configuration
					</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="valueVersioningEnabled" type="xs:boolean"
				minOccurs="1" maxOccurs="1">
			</xs:element>
			<xs:element name="inputSchema" type="tns:schemaGroup"
				minOccurs="0" maxOccurs="1">
				<xs:annotation>
					<xs:documentation>
						An optional schema for the input fields in the
						record
					</xs:documentation>
				</xs:annotation>
				<xs:unique name="inputFieldGroupNameUnique">
					<xs:selector xpath="field:fieldGroup"></xs:selector>
					<xs:field xpath="field:groupName"></xs:field>
				</xs:unique>
			</xs:element>
			<xs:element name="outputSchema" type="tns:schemaGroup"
				minOccurs="0" maxOccurs="1">
				<xs:annotation>
					<xs:documentation>
						An optional schema for the output fields in the
						record
					</xs:documentation>
				</xs:annotation>
				<xs:unique name="outputFieldGroupNameUnique">
					<xs:selector xpath="field:fieldGroup"></xs:selector>
					<xs:field xpath="field:groupName"></xs:field>
				</xs:unique>
			</xs:element>
			<xs:element name="intermediateField" type="common:FieldDefinition"
				minOccurs="0" maxOccurs="unbounded">
				<xs:annotation>
					<xs:documentation>
						An definition for the intemediate fields which
						would be used through transformation
					</xs:documentation>
				</xs:annotation>
			</xs:element>

			<xs:element name="passThroughPolicy" type="tns:PassThroughPolicy"
				maxOccurs="1" minOccurs="1">
				<xs:annotation>
					<xs:documentation>
						The passthrough policy which would be used for
						all the workflows
					</xs:documentation>
				</xs:annotation>
			</xs:element>

			<xs:element name="defaultVersionPolicy" type="tns:VersionPolicy"
				maxOccurs="1" minOccurs="0">
				<xs:annotation>
					<xs:documentation>
						The default version policy which would be used
						for
						all the function workflows which don't define
						version
						policy
						explicitly.
					</xs:documentation>
				</xs:annotation>
			</xs:element>

			<xs:element name="workflowBundle" type="tns:WorkflowBundle"
				maxOccurs="1" minOccurs="0">
			</xs:element>

			<xs:element ref="tns:workflow" minOccurs="0" maxOccurs="unbounded">
				<xs:annotation>
					<xs:documentation>
						The definition of the transformation workflows
					</xs:documentation>
				</xs:annotation>
			</xs:element>

			<xs:element name="resource" type="tns:TransformationResource"
				maxOccurs="unbounded" minOccurs="0">

				<xs:unique name="resource">
					<xs:selector xpath="."></xs:selector>
					<xs:field xpath="tns:name"></xs:field>
				</xs:unique>
			</xs:element>

			<xs:element name="logLevel" type="tns:LogLevel" maxOccurs="1"
				minOccurs="0">
				<xs:annotation>
					<xs:documentation>Sets the default log level for the pipeline, if
						no default log level was specified, the default
						log level will be
						set to WARN
					</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
	</xs:complexType>

	<xs:simpleType name="LogLevel">
		<xs:restriction base="xs:string">
			<xs:enumeration value="OFF"></xs:enumeration>
			<xs:enumeration value="FATAL"></xs:enumeration>
			<xs:enumeration value="ERROR"></xs:enumeration>
			<xs:enumeration value="WARN"></xs:enumeration>
			<xs:enumeration value="INFO"></xs:enumeration>
			<xs:enumeration value="DEBUG"></xs:enumeration>
			<xs:enumeration value="TRACE"></xs:enumeration>
			<xs:enumeration value="ALL"></xs:enumeration>
		</xs:restriction>
	</xs:simpleType>

	<xs:complexType name="schemaGroup">
		<xs:sequence>
			<xs:element name="defaultFieldGroup" type="xs:string"
				minOccurs="0" maxOccurs="1">
				<xs:annotation>
					<xs:documentation>
						Specify which field group is the default.
					</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element ref="xi:include" minOccurs="0" maxOccurs="unbounded">
			</xs:element>
			<xs:element ref="field:fieldGroup" minOccurs="0"
				maxOccurs="unbounded">
			</xs:element>
		</xs:sequence>
	</xs:complexType>

	<xs:complexType name="Workflow" abstract="true">
		<xs:annotation>
			<xs:documentation>
				Workflow is the unit of work for the transformation
				framework. There are different types of
				workflows, for
				example
				SequentialWorkflow, FuctionWorkflow, etc.
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
		    <xs:element name="workMessageGroupQualifier" type="xs:string"
                        minOccurs="0" maxOccurs="1"></xs:element>
			<xs:element name="errorHandlingConfig" type="tns:ErrorHandlingConfig"
				maxOccurs="1" minOccurs="0">
				<xs:annotation>
					<xs:documentation>
						An optional configuration for error handling
					</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="logLevel" type="tns:LogLevel" maxOccurs="1"
				minOccurs="0">
				<xs:annotation>
					<xs:documentation>Sets the default log level for the workflow, if
						no log level was specified, the default log level
						will be used
					</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>

		<xs:attribute name="name" type="xs:string">
			<xs:annotation>
				<xs:documentation>
					A unique name which would be used a pointer to the
					workflow
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>

	<xs:complexType name="FunctionWorkflow">
		<xs:annotation>
			<xs:documentation>
				A workflow which defines a call to a Java function,
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="tns:Workflow">
				<xs:sequence>
					<xs:element name="functionName" type="xs:string">
						<xs:annotation>
							<xs:documentation>
								The function name which annotated with
								com.ebay.cassini.framework.transformation.function.Function
								annotation
							</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="className" type="xs:string">
						<xs:annotation>
							<xs:documentation>
								The class name which defines the
								function
							</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="inputBinding" type="tns:InputBinding"
						maxOccurs="unbounded" minOccurs="0">
						<xs:annotation>
							<xs:documentation>
								The binding between the qualifier/value
								to the
								function parameters
							</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:choice minOccurs="0" maxOccurs="1">
						<xs:element name="outputBinding"
							type="tns:OutputBinding">
							<xs:annotation>
								<xs:documentation>
									The binding from the function return
									value to the record
								</xs:documentation>
							</xs:annotation>
						</xs:element>
						<xs:element name="mappedOutputBinding"
							type="tns:MappedOutputBinding" maxOccurs="unbounded"
							minOccurs="0">
							<xs:annotation>
								<xs:documentation>
									A binding from an output name to the
									one of function's return value, this
									allows specifiying multiple outputs
									for a function
								</xs:documentation>
							</xs:annotation>
						</xs:element>
					</xs:choice>
					<xs:element name="resource" type="xs:IDREF" maxOccurs="unbounded"
						minOccurs="0">
					</xs:element>
                    <xs:element name="workMessageProcessor" type="tns:WorkMessageProcessor" maxOccurs="1" minOccurs="0">
						</xs:element>
                </xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>


	<xs:complexType name="SequentialWorkflow">
		<xs:annotation>
			<xs:documentation>
				A workflow for executing a sequence of workflows,
				any
				type of workflow is permited
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="tns:WorkflowContainer">
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:complexType name="ConditionalWorkflow">
		<xs:complexContent>
			<xs:extension base="tns:Workflow">
				<xs:sequence>
					<xs:element name="case" maxOccurs="unbounded" minOccurs="0">
						<xs:complexType>
							<xs:sequence>
								<xs:element name="when">
									<xs:complexType>
										<xs:sequence>
											<xs:element type="xs:string" name="functionName" />
											<xs:element type="xs:string" name="className" />
											<xs:element name="inputBinding" type="tns:InputBinding"
												maxOccurs="unbounded" minOccurs="0" />
										</xs:sequence>
									</xs:complexType>
								</xs:element>
								<xs:element name="then">
									<xs:complexType>
										<xs:sequence>
											<xs:element ref="tns:workflow" />
										</xs:sequence>
									</xs:complexType>
								</xs:element>
							</xs:sequence>
						</xs:complexType>
					</xs:element>
					<xs:element name="otherwise" maxOccurs="1" minOccurs="0">
						<xs:complexType>
							<xs:sequence>
								<xs:element ref="tns:workflow" />
							</xs:sequence>
						</xs:complexType>
					</xs:element>
					<xs:element name="resource" type="xs:IDREF" maxOccurs="unbounded"
						minOccurs="0">
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:simpleType name="OutputAction">
		<xs:restriction base="xs:string">
			<xs:enumeration value="APPEND"></xs:enumeration>
		</xs:restriction>
	</xs:simpleType>

	<xs:complexType name="OutputBinding">
		<xs:choice>
			<xs:sequence>
				<xs:element name="qualifier" type="tns:OutputValueQualifier" />
				<xs:element name="outputAction" type="tns:OutputAction"
					maxOccurs="1" minOccurs="0">
					<xs:annotation>
						<xs:documentation>
							an action to take on the output result
						</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element ref="tns:versionPolicy" maxOccurs="1"
					minOccurs="0">
					<xs:annotation>
						<xs:documentation>
							A policy for getting the version for the
							value
							which will be added to the record
						</xs:documentation>
					</xs:annotation>
				</xs:element>
			</xs:sequence>
			<xs:element name="accessQualifier" type="tns:AccessQualifier" />
		</xs:choice>
		<xs:attribute name="optional" type="xs:boolean" default="false"></xs:attribute>
	</xs:complexType>

	<xs:complexType name="VersionPolicy" abstract="true">
		<xs:annotation>
			<xs:documentation>
				Used to determine which policy to apply when
				appending a
				value to the record
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="description" type="xs:string" maxOccurs="1"
				minOccurs="0">
			</xs:element>
		</xs:sequence>
	</xs:complexType>

	<xs:complexType name="MappedOutputBinding">
		<xs:complexContent>
			<xs:extension base="tns:OutputBinding">
				<xs:sequence>
					<xs:element name="parameterName" type="xs:string"></xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:complexType name="ErrorHandlingConfig">
		<xs:sequence>
			<xs:element name="workflow" type="tns:Workflow" minOccurs="0">
				<xs:annotation>
					<xs:documentation>
						A workflow to execute in case of an error
					</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="errorPolicy" type="tns:ErrorHandlingPolicy">
				<xs:annotation>
					<xs:documentation>
						The error policy allows to set the error
						handling
						behavior for the workflow whenever an
						error occurs
						in a workflow,
						The default policy
						is: BREAK_ON_ERROR.
					</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
	</xs:complexType>

	<xs:simpleType name="ErrorHandlingPolicy">
		<xs:restriction base="xs:string">
			<xs:enumeration value="REPORT_ONLY">
				<xs:annotation>
					<xs:documentation>
						The report only policy will ignore any error
						which occured through executing the workflow and
						only
						have the
						information available in the
						result at the end.
					</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="FAIL_FAST">
				<xs:annotation>
					<xs:documentation>
						In case of an error the fail fast policy the
						transformation framework will execute the error
						workflow if
						available and stop the exeuction of
						all transformations for the
						current processed
						record.
					</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="BREAK_ON_ERROR">
				<xs:annotation>
					<xs:documentation>
						In case of an error the break on error policy
						will run the error workflow if available, if the
						error workflow
						successed the execution of the
						workflow will be marked as SUCCESS,
						otherwise
						the workflow will be
						marked as FAILURE and the
						execution
						of
						the workflow will be breaked. For
						example if an sequential
						workflow
						is
						currently
						executing 3 workflows and second workflow
						fails
						the third
						workflow will not be executed and
						thesequential
						workflow will
						be
						marked as failed.
					</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
		</xs:restriction>
	</xs:simpleType>

	<xs:element name="workflow" type="tns:Workflow"></xs:element>

	<xs:complexType name="InputBinding">
		<xs:annotation>
			<xs:documentation>
				Used for binding the function input parameter, the
				parameter name referes to the @InputParam annotation's
				value. There
				is a choice between a Qualifier and a
				literal value for the binding.
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:choice minOccurs="1" maxOccurs="1">
				<xs:element name="qualifier"
					type="tns:InputValueQualifier">
				</xs:element>
				<xs:element name="literal" type="xs:string"></xs:element>
				<xs:element name="keyValuePairs" type="tns:KeyValuePairs"></xs:element>
				<xs:element name="inject" type="tns:InjectType"></xs:element>
				<xs:element name="reference" type="tns:Reference"></xs:element>
				<xs:element name="accessQualifier"
					type="tns:AccessQualifier">
				</xs:element>
				<xs:element name="workMessageGroupQualifier"
					type="xs:string">
				</xs:element>
			</xs:choice>
			<xs:element name="bitNumber" type="xs:int" maxOccurs="1"
				minOccurs="0">
			</xs:element>
		</xs:sequence>
		<xs:attribute name="parameterName" type="xs:string" use="required"></xs:attribute>
		<xs:attribute name="isParameterValueLoggingEnabled" type="xs:boolean"
			default="true"></xs:attribute>
		<xs:attribute name="nullable" type="xs:boolean" use="optional"></xs:attribute>
	</xs:complexType>

	<xs:complexType name="Reference">
		<xs:sequence>
			<xs:element name="className" type="xs:string" />
			<xs:element name="referenceName" type="xs:string" />
		</xs:sequence>
	</xs:complexType>

	<xs:simpleType name="InjectType">
		<xs:restriction base="xs:string">
			<xs:enumeration value="RECORD_CONTEXT"></xs:enumeration>
			<xs:enumeration value="RECORD"></xs:enumeration>
		</xs:restriction>
	</xs:simpleType>

	<xs:complexType name="Conversion">
		<xs:annotation>
			<xs:documentation>
				Used to convert an input field value to another
				data type.
				The client has to provide the source and
				target type.
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="convertType" type="tns:ConvertType"
				minOccurs="1" maxOccurs="1">
			</xs:element>
		</xs:sequence>
	</xs:complexType>

	<xs:complexType name="ConvertType">
		<xs:sequence>
			<xs:element name="from" type="tns:SimpleDataType"></xs:element>
			<xs:element name="to" type="tns:SimpleDataType"></xs:element>
		</xs:sequence>
	</xs:complexType>

	<xs:simpleType name="SimpleDataType">
		<xs:restriction base="xs:string">
			<xs:enumeration value="STRING"></xs:enumeration>
			<xs:enumeration value="LONG"></xs:enumeration>
			<xs:enumeration value="DOUBLE"></xs:enumeration>
			<xs:enumeration value="BOOLEAN"></xs:enumeration>
		</xs:restriction>
	</xs:simpleType>

	<xs:element name="functionWorkflow" type="tns:FunctionWorkflow"
		substitutionGroup="tns:workflow">
	</xs:element>

	<xs:complexType name="ReferenceWorkflow">
		<xs:annotation>
			<xs:documentation>
				A workflow which used for referering another
				workflow
				using the ref attribute
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="tns:Workflow">
				<xs:attribute name="workflowModuleName" type="xs:string">
					<xs:annotation>
						<xs:documentation>
							A name of a workflow module to refer
						</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="ref" type="xs:string" use="required">
					<xs:annotation>
						<xs:documentation>
							A name of a workflow to refer
						</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:element name="referenceWorkflow" type="tns:ReferenceWorkflow"
		substitutionGroup="tns:workflow">
		<xs:annotation>
			<xs:documentation></xs:documentation>
		</xs:annotation>
	</xs:element>

	<xs:complexType name="Qualifier">
		<xs:annotation>
			<xs:documentation>
				A Qualifier is used to refer a specific qualifier
				in a
				nested type. The qualifier can be a key in a
				map or an
				element
				index in a list.
			</xs:documentation>
		</xs:annotation>
		<xs:choice minOccurs="1" maxOccurs="1">
			<xs:element name="key" type="xs:string"></xs:element>
			<xs:element name="elementIndex" type="xs:int"></xs:element>
		</xs:choice>
	</xs:complexType>

	<xs:complexType name="ValueQualifier">
		<xs:sequence>
			<xs:element name="fieldName" type="xs:string" maxOccurs="1"
				minOccurs="1">
			</xs:element>
			<xs:element name="fieldGroupName" type="xs:string"
				minOccurs="0" maxOccurs="1" />
			<xs:element name="nestedQualifer" type="tns:Qualifier"
				maxOccurs="unbounded" minOccurs="0">
				<xs:annotation>
					<xs:documentation>
						An optional element to specify a nested value
						qualifiers
					</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="conversion" type="tns:Conversion"
				minOccurs="0" maxOccurs="1"></xs:element>
			<xs:element name="allVersions" type="xs:boolean"
				minOccurs="0" maxOccurs="1" />
		</xs:sequence>
		<xs:attribute name="isIntermediate" type="xs:boolean"
			default="false">
		</xs:attribute>
	</xs:complexType>

	<xs:simpleType name="SchemaType">
		<xs:restriction base="xs:string">
			<xs:enumeration value="INPUT"></xs:enumeration>
			<xs:enumeration value="INTERMEDIATE"></xs:enumeration>
			<xs:enumeration value="OUTPUT"></xs:enumeration>
		</xs:restriction>
	</xs:simpleType>

	<xs:complexType name="InputValueQualifier">
		<xs:complexContent>
			<xs:extension base="tns:ValueQualifier">
				<xs:attribute name="modifiable" type="xs:boolean"
					default="false" />
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:complexType name="OutputValueQualifier">
		<xs:complexContent>
			<xs:extension base="tns:ValueQualifier" />
		</xs:complexContent>
	</xs:complexType>

	<xs:complexType name="FieldVersionPolicy">
		<xs:complexContent>
			<xs:extension base="tns:VersionPolicy">
				<xs:sequence>
					<xs:element name="fieldQualifier" type="tns:FieldValueQualifier">
					</xs:element>
					<xs:element name="versionSource" type="tns:FieldVersionPolicyType"
						maxOccurs="1" minOccurs="1">
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:complexType name="NoneVersionPolicy">
		<xs:complexContent>
			<xs:extension base="tns:VersionPolicy">
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>


	<xs:simpleType name="FieldVersionPolicyType">
		<xs:restriction base="xs:string">
			<xs:enumeration value="VALUE_VERSION"></xs:enumeration>
			<xs:enumeration value="VALUE"></xs:enumeration>
		</xs:restriction>
	</xs:simpleType>

	<xs:complexType name="FieldValueQualifier">
		<xs:complexContent>
			<xs:restriction base="tns:ValueQualifier">
				<xs:sequence>
					<xs:element name="fieldName" type="xs:string" maxOccurs="1"
						minOccurs="1">
						<xs:annotation>
							<xs:documentation>
								the corresponding qualifier for the
								field name
								in the record
							</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="fieldGroupName" type="xs:string"
						minOccurs="0" maxOccurs="1" />
					<xs:element name="conversion" type="tns:Conversion"
						minOccurs="0" maxOccurs="1" />
				</xs:sequence>
				<xs:attribute name="isIntermediate" type="xs:boolean"
					default="false">
				</xs:attribute>
			</xs:restriction>
		</xs:complexContent>
	</xs:complexType>

	<xs:complexType name="PassThroughWorkflow">
		<xs:annotation>
			<xs:documentation>
				A workflow for passing through field/literal value to a
				field in the record
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="tns:Workflow">
				<xs:sequence>
					<xs:element name="source" type="tns:ValueQualifier"
						minOccurs="1" maxOccurs="1">
						<xs:annotation>
							<xs:documentation>
								The source qualifier which the
								passthrough will get the value
							</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="target"
						type="tns:FieldValueQualifier" minOccurs="0" maxOccurs="1">
						<xs:annotation>
							<xs:documentation>
								An optional target to specify a
								different field name for passing the
								value through.
							</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="versionPolicy"
						type="tns:VersionPolicy" minOccurs="0" maxOccurs="1">
						<xs:annotation>
							<xs:documentation>
								An optional version policy.
							</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
				<xs:attribute name="optional" type="xs:boolean" default="false">
					<xs:annotation>
						<xs:documentation>Specify if the passthrough field is optional, in case the field is not present and optional="true" the workflow will considered to be success.
In case optional is not specified or optional="false" and the field is not present the workflow will fail.</xs:documentation>
					</xs:annotation></xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:simpleType name="PassThroughPolicy">
		<xs:restriction base="xs:string">
			<xs:enumeration value="IMPLICIT"></xs:enumeration>
			<xs:enumeration value="EXPLICIT"></xs:enumeration>
		</xs:restriction>
	</xs:simpleType>

	<xs:element name="passThroughWorkflow" type="tns:PassThroughWorkflow"
		substitutionGroup="tns:workflow">
		<xs:annotation></xs:annotation>
	</xs:element>

	<xs:element name="renameWorkflow" type="tns:RenameWorkflow"
		substitutionGroup="tns:workflow">
		<xs:annotation></xs:annotation>
	</xs:element>

	<xs:element name="dropWorkflow" type="tns:DropWorkflow"
		substitutionGroup="tns:workflow">
		<xs:annotation></xs:annotation>
	</xs:element>

	<xs:element name="setConstantValueWorkflow" type="tns:SetConstantValueWorkflow"
		substitutionGroup="tns:workflow">
	</xs:element>

	<xs:complexType name="RenameWorkflow">
		<xs:annotation>
			<xs:documentation>
				A workflow for renaming field in the record
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="tns:Workflow">
				<xs:sequence>
					<xs:element name="source" type="tns:FieldValueQualifier"
						minOccurs="1" maxOccurs="1">
						<xs:annotation>
							<xs:documentation>
								The source field which would be renamed.
								It's
								important to understand that rename
								is only
								supported for top
								level fields.
							</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="target" type="tns:ValueQualifier"
						minOccurs="1" maxOccurs="1">
						<xs:annotation>
							<xs:documentation>
								The target for the rename qualifier
								(field name
								+ an optional nested
								qualifiers), It is possible
								to rename a
								top
								level field to a nested field or
								rename top level field to a
								different
								top level field.
							</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="versionPolicy"
						type="tns:VersionPolicy" minOccurs="0" maxOccurs="1">
						<xs:annotation>
							<xs:documentation>
								An optional version policy.
							</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
				<xs:attribute name="keepOldField" type="xs:boolean" default="false">
					<xs:annotation>
						<xs:documentation>Specify if the old field is kept or not.
							If keepOldField is not specified or keepOldField="false",
							then the old field will be removed from the record.
							If keepOldField="true", then the old field is kept.
							Note: For keepOldField="true" to work, passThroughPolicy
							needs to be IMPLICIT.
						</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="optional" type="xs:boolean" default="false">
					<xs:annotation>
						<xs:documentation>Specify if the field to be renamed is optional, in case the field is not present and optional="true" the workflow will considered to be success.
In case optional is not specified or optional="false" and the field is not present the workflow will fail.</xs:documentation>
					</xs:annotation></xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:complexType name="DropWorkflow">
		<xs:annotation>
			<xs:documentation>
				A workflow for dropping a field in the record
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="tns:Workflow">
				<xs:sequence>
					<xs:element name="source" type="tns:FieldValueQualifier"
						minOccurs="1" maxOccurs="1">
						<xs:annotation>
							<xs:documentation>
								The field name to drop in the record
							</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:complexType name="SetConstantValueWorkflow">
		<xs:annotation>
			<xs:documentation>
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="tns:Workflow">
				<xs:sequence>
					<xs:element name="value" type="xs:string" minOccurs="1"
						maxOccurs="1">
						<xs:annotation>
							<xs:documentation>The primitive value to be set at target field
								qualifier.
							</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="valueType" type="common:PrimtiveDataType"
						minOccurs="1" maxOccurs="1">
						<xs:annotation>
							<xs:documentation>The primitive data type of the literal value.
							</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="versionPolicy" type="tns:VersionPolicy"
						minOccurs="1" maxOccurs="1">
						<xs:annotation>
							<xs:documentation>The version policy to be used while setting
								literal value to the target field qualifier.
							</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="target" type="tns:FieldValueQualifier"
						minOccurs="1" maxOccurs="1">
						<xs:annotation>
							<xs:documentation>The field qualifier to which the literal value
								to be set.
							</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:complexType name="InputQualifier">
		<xs:complexContent>
			<xs:restriction base="tns:Qualifier">
				<xs:choice maxOccurs="1" minOccurs="1">
					<xs:element name="key" type="xs:string">
						<xs:annotation>
							<xs:documentation>
								A key inside a map
							</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="elementIndex" type="xs:int">
						<xs:annotation>
							<xs:documentation>
								An element index inside an array
							</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:choice>
			</xs:restriction>
		</xs:complexContent>
	</xs:complexType>

	<xs:element name="fieldVersionPolicy" type="tns:FieldVersionPolicy">
	</xs:element>

	<xs:element name="versionPolicy" type="tns:VersionPolicy"></xs:element>

	<xs:element name="workflowModule" type="tns:WorkflowModule"></xs:element>


	<xs:complexType name="WorkflowBundle">
		<xs:sequence>

			<xs:element ref="tns:workflowModule" maxOccurs="unbounded"
				minOccurs="0">
			</xs:element>
			<xs:element ref="xi:include" maxOccurs="unbounded"
				minOccurs="0">
			</xs:element>

		</xs:sequence>

	</xs:complexType>

	<xs:complexType name="WorkflowModule">
		<xs:sequence>
			<xs:element name="name" type="xs:string">
			</xs:element>
			<xs:element name="description" type="xs:string" maxOccurs="1"
				minOccurs="0">
			</xs:element>

			<xs:element ref="tns:workflow" maxOccurs="unbounded"
				minOccurs="1">
			</xs:element>
		</xs:sequence>
	</xs:complexType>

	<xs:complexType name="TransformationResource">
		<xs:sequence>
			<xs:element name="name" type="xs:ID"></xs:element>
		</xs:sequence>
	</xs:complexType>

	<xs:complexType name="CurrentTimeVersionPolicy">
		<xs:annotation>
			<xs:documentation>A version policy which uses the current time of
				record transformation execution.
				The time unit which
				would be used is
				configured by the client.
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="tns:VersionPolicy">
				<xs:sequence>
					<xs:element name="timeUnit" type="tns:TimeUnit"
						maxOccurs="1" minOccurs="1"></xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:simpleType name="TimeUnit">
		<xs:restriction base="xs:string">
			<xs:enumeration value="SECONDS"></xs:enumeration>
			<xs:enumeration value="MILLISECONDS"></xs:enumeration>
		</xs:restriction>
	</xs:simpleType>

	<xs:complexType name="UnorderedWorkflow">
		<xs:annotation>
			<xs:documentation>
				A container for 1 or more workflows which
				independent
				and does not depends on each other state.
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="tns:WorkflowContainer">
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:complexType name="WorkflowContainer" abstract="true">
		<xs:complexContent>
			<xs:extension base="tns:Workflow">
				<xs:sequence>
					<xs:element ref="tns:workflow" maxOccurs="unbounded"
						minOccurs="1"></xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:complexType name="AccessQualifier">
		<xs:sequence>
			<xs:choice><xs:element name="identifierReference" type="tns:Reference"></xs:element><xs:element name="identifier" type="xs:string" /></xs:choice>
            <xs:element name="contextName" type="xs:string" minOccurs="0" maxOccurs="1" />
        </xs:sequence>
	</xs:complexType>


	<xs:simpleType name="StoragePolicy">
		<xs:restriction base="xs:string">
			<xs:enumeration value="TRANSIENT" />
			<xs:enumeration value="PERMANENT" />
		</xs:restriction>
	</xs:simpleType>

	<xs:complexType name="WorkMessageProcessor">
		<xs:sequence>
			<xs:element name="workflow" type="tns:Workflow"></xs:element>
			<xs:element name="receiver" type="xs:string"></xs:element>
		</xs:sequence>
		<xs:attribute name="parallelism" type="xs:int" default="1"></xs:attribute>
		<xs:attribute name="timeoutMilliseconds" type="xs:long"></xs:attribute>
		<xs:attribute name="maxQueueSize" type="xs:int" default="250"></xs:attribute>
	</xs:complexType>

	<xs:complexType name="ParameterVersionPolicy">
		<xs:complexContent>
			<xs:extension base="tns:VersionPolicy">
				<xs:attribute name="parameterName" type="xs:string"></xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	
	 <xs:complexType name="KeyValuePair">
        <xs:annotation>
            <xs:documentation>Similuate a mapping from a String to String.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="key" type="xs:string"></xs:element>
            <xs:element name="value" type="xs:string"></xs:element>
        </xs:sequence>
    </xs:complexType>
    
     <xs:complexType name="KeyValuePairs">
        <xs:annotation>
            <xs:documentation>A map from String to String
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="keyValuePair" type="tns:KeyValuePair"
                maxOccurs="unbounded" minOccurs="0"></xs:element>
        </xs:sequence>
    </xs:complexType>
    
</xs:schema>
